{
  "description": "Supabase insert operation contract for logging task submissions",
  "operation": "INSERT",
  "table": "task_submissions",
  "method": "supabase.from('task_submissions').insert([payload])",
  
  "request_payload": {
    "description": "Data sent to Supabase for insertion",
    "example": {
      "task_text": "Optimize database queries for faster load times",
      "priority": "HIGH",
      "categories": [
        "PERFORMANCE",
        "TECHNICAL-DEBT",
        "USER-FACING"
      ],
      "complexity": "MEDIUM",
      "suggested_order": "Address soon to prevent performance degradation affecting user experience"
    },
    "fields": {
      "task_text": {
        "type": "string",
        "required": true,
        "constraints": [
          "Non-empty string",
          "Preserved exactly as entered (whitespace, special chars, newlines)"
        ],
        "example": "Fix database connection timeout in production"
      },
      "priority": {
        "type": "string",
        "required": true,
        "constraints": [
          "Must be exactly one of: 'HIGH', 'MEDIUM', 'LOW'",
          "Case-sensitive (must be uppercase)"
        ],
        "example": "HIGH"
      },
      "categories": {
        "type": "array of strings",
        "required": true,
        "constraints": [
          "Must be an array (can be empty)",
          "Each element is a string tag",
          "Order is preserved",
          "Duplicates allowed"
        ],
        "example": ["BUG-FIX", "CRITICAL-PATH", "USER-FACING"]
      },
      "complexity": {
        "type": "string",
        "required": true,
        "constraints": [
          "Must be exactly one of: 'HIGH', 'MEDIUM', 'LOW'",
          "Case-sensitive (must be uppercase)"
        ],
        "example": "MEDIUM"
      },
      "suggested_order": {
        "type": "string",
        "required": true,
        "constraints": [
          "Non-empty string",
          "Typically one sentence explaining prioritization",
          "Free-form text"
        ],
        "example": "Fix immediately - blocking production deployments"
      }
    },
    "omitted_fields": {
      "id": "Auto-generated by database (UUID v4)",
      "created_at": "Auto-generated by database (NOW() with timezone)"
    }
  },
  
  "response_success": {
    "description": "Successful insert response from Supabase",
    "example": {
      "data": [
        {
          "id": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
          "task_text": "Optimize database queries for faster load times",
          "priority": "HIGH",
          "categories": [
            "PERFORMANCE",
            "TECHNICAL-DEBT",
            "USER-FACING"
          ],
          "complexity": "MEDIUM",
          "suggested_order": "Address soon to prevent performance degradation affecting user experience",
          "created_at": "2025-10-17T14:23:45.678Z"
        }
      ],
      "error": null,
      "count": null,
      "status": 201,
      "statusText": "Created"
    },
    "fields": {
      "data": {
        "description": "Array of inserted records (typically one item)",
        "type": "array"
      },
      "error": {
        "description": "null on success",
        "type": "null"
      },
      "status": {
        "description": "HTTP status code 201 for successful creation",
        "type": "number"
      }
    }
  },
  
  "response_error": {
    "description": "Error response from Supabase when insert fails",
    "examples": [
      {
        "scenario": "Missing required field",
        "response": {
          "data": null,
          "error": {
            "message": "null value in column \"task_text\" violates not-null constraint",
            "details": "Failing row contains (uuid, null, HIGH, {...}, MEDIUM, ..., timestamp).",
            "hint": null,
            "code": "23502"
          },
          "count": null,
          "status": 400,
          "statusText": "Bad Request"
        }
      },
      {
        "scenario": "Invalid enum value",
        "response": {
          "data": null,
          "error": {
            "message": "new row for relation \"task_submissions\" violates check constraint \"task_submissions_priority_check\"",
            "details": "Failing row contains (uuid, \"Fix bug\", URGENT, {...}, MEDIUM, ..., timestamp).",
            "hint": null,
            "code": "23514"
          },
          "count": null,
          "status": 400,
          "statusText": "Bad Request"
        }
      },
      {
        "scenario": "Network error",
        "response": {
          "data": null,
          "error": {
            "message": "fetch failed",
            "details": null,
            "hint": null,
            "code": "NETWORK_ERROR"
          },
          "count": null,
          "status": 0,
          "statusText": ""
        }
      },
      {
        "scenario": "Authentication error (invalid anon key)",
        "response": {
          "data": null,
          "error": {
            "message": "Invalid API key",
            "details": null,
            "hint": null,
            "code": "PGRST301"
          },
          "count": null,
          "status": 401,
          "statusText": "Unauthorized"
        }
      },
      {
        "scenario": "RLS policy violation",
        "response": {
          "data": null,
          "error": {
            "message": "new row violates row-level security policy for table \"task_submissions\"",
            "details": null,
            "hint": null,
            "code": "42501"
          },
          "count": null,
          "status": 403,
          "statusText": "Forbidden"
        }
      }
    ]
  },
  
  "error_handling": {
    "description": "How errors are handled in the application",
    "strategy": "Fire-and-forget with graceful degradation",
    "user_impact": {
      "on_success": "No UI change (silent success)",
      "on_failure": "Subtle warning banner: 'Note: Task history could not be saved at this time'"
    },
    "console_logging": {
      "on_success": "console.log('Task logged successfully:', data)",
      "on_failure": "console.warn('Database logging failed:', error)"
    },
    "error_mapping": {
      "network_error": "Unable to connect to database",
      "auth_error_401": "Database authentication failed",
      "validation_error_400": "Invalid data format",
      "rls_error_403": "Permission denied",
      "generic_error": "Database service temporarily unavailable"
    }
  },
  
  "code_example": {
    "description": "JavaScript implementation using @supabase/supabase-js",
    "javascript": "async function logTaskSubmission(taskText, analysis) {\n  // Get Supabase client\n  const supabase = getSupabaseClient();\n  \n  if (!supabase) {\n    console.warn('Supabase not configured - logging disabled');\n    return;\n  }\n  \n  try {\n    // Validate before insert\n    validateTaskSubmission(taskText, analysis);\n    \n    // Prepare insert payload\n    const payload = {\n      task_text: taskText,\n      priority: analysis.priority,\n      categories: analysis.categories,\n      complexity: analysis.complexity,\n      suggested_order: analysis.suggestion\n    };\n    \n    // Insert to Supabase\n    const { data, error } = await supabase\n      .from('task_submissions')\n      .insert([payload]);\n    \n    if (error) {\n      throw new Error(`Supabase insert failed: ${error.message}`);\n    }\n    \n    console.log('Task logged successfully:', data);\n    \n  } catch (error) {\n    console.warn('Database logging failed:', error);\n    throw error; // Re-throw for .catch() at call site\n  }\n}\n\n// Usage (fire-and-forget)\nlogTaskSubmission(taskText, analysis).catch(error => {\n  showWarning('Task history could not be saved at this time');\n});"
  },
  
  "performance_notes": [
    "Insert operations typically complete in 50-300ms over internet",
    "Fire-and-forget pattern means UI is not blocked",
    "Supabase client handles connection pooling automatically",
    "Single row insert is atomic (all fields or none)",
    "Indexes on created_at and priority improve query performance but don't affect insert speed significantly"
  ],
  
  "security_notes": [
    "Anonymous key (anon key) is used for client-side access",
    "Row Level Security (RLS) policies control who can insert",
    "Workshop demo uses permissive RLS (allow all inserts from anon)",
    "Production should use authenticated users with strict RLS",
    "Database credentials exposed in browser (acceptable for demo, not for production)",
    "No sensitive user data should be stored with this permissive RLS setup"
  ]
}

